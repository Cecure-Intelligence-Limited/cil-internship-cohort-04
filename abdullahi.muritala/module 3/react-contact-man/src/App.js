/* eslint-disable eqeqeq */
import { Route, Routes, useNavigate } from 'react-router-dom';
import Layout from './pages/Layout';
import Home from './pages/Home';
import About from './pages/About';
import Notfound from './pages/Notfound';
import AddContact from './pages/AddContact';
import EditContact from './pages/EditContact';
import { createContext, useEffect, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';

export const ContactContext = createContext();

function App() {
  const [contactList, setContactList] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const getUsers = async () => {
      const users = await fetchData('https://jsonplaceholder.typicode.com/users');

      setContactList(users);
    };

    getUsers();
  }, []);

  const fetchData = async (url) => {
    try {
      const response = await fetch(url);
      const data = await response.json();
      return data;
    } catch (error) {
      throw new Error(error);
    }
  };

  const deleteContact = (event) => {
    const targetContactId = event.currentTarget.dataset.id;
    setContactList((prev) => {
      // The values generated by uuid are alphanumeric
      return prev.filter((contact) => contact.id != targetContactId);
    });
  };

  const addContact = (name, email, phone) => {
    const id = uuidv4();
    const newContact = { id, name, email, phone };

    setContactList((prev) => [newContact, ...prev]);
    navigate('./');
  };

  const editContact = (id, name, email, phone) => {
    const newContact = { id, name, email, phone };

    setContactList((prev) =>
      prev.map((contact) => {
        if (contact.id == id) {
          return newContact;
        } else {
          return contact;
        }
      }),
    );

    navigate('./');
  };

  const contextValue = {
    contactList,
    deleteContact,
    addContact,
    editContact,
  };

  return (
    <ContactContext.Provider value={contextValue}>
      <div className="app">
        <Routes>
          <Route path="/" element={<Layout />}>
            <Route index element={<Home />} />
            <Route path="about" element={<About />} />
            <Route path="add" element={<AddContact />} />
            <Route path="edit/:id" element={<EditContact />} />
            <Route path="*" element={<Notfound />} />
          </Route>
        </Routes>
      </div>
    </ContactContext.Provider>
  );
}

export default App;
